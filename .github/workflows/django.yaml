name: Django Project Workflow
on:
  workflow_call:
    inputs:
      # Mandatory inputs
      projectName:
        required: true
        type: string
      # Optional finetuning inputs
      path:
        required: False
        type: string
        default: .
      skipDjangoCheck: # NOTE: Use with CAUTION!
        required: False
        type: boolean
        default: false
      pythonVersion:
        required: False
        type: string
        default: 3.8-buster
      # Linting config
      flake:
        required: False
        type: boolean
        default: True
      black:
        required: False
        type: boolean
        default: True
      ruff:
        required: False
        type: boolean
        default: False
      # Dependency manager config
      dependencyManager:
        required: False
        type: string
        description: "Dependency manager to use (e.g., pipenv, poetry)"
        default: 'pipenv'
jobs:
  django-check:
    name: Django Check
    runs-on: ubuntu-latest
    if: ${{ !inputs.skipDjangoCheck }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: v0-${{ hashFiles('${{ inputs.path }}/Pipfile.lock') }}
      - name: Install Dependencies (pipenv)
        run: |-
          cd ${{ inputs.path }}
          pip install pipenv
          pipenv install --deploy --dev
        if: ${{ inputs.dependencyManager == 'pipenv' }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        if: ${{ inputs.dependencyManager == 'poetry' }}
      - name: Install Dependencies (poetry)
        run: |-
          cd ${{ inputs.path }}
          poetry install --no-root
        if: ${{ inputs.dependencyManager == 'poetry' }}
      - name: Lint (flake8)
        run: |-
          cd ${{ inputs.path }}
          ${{ inputs.dependencyManager }} run flake8 .
        if: ${{ inputs.flake }}
      - name: Lint (black)
        run: |-
          cd ${{ inputs.path }}
          ${{ inputs.dependencyManager }} run black --check .
        if: ${{ inputs.black }}
      - name: Lint (ruff)
        run: |-
          cd ${{ inputs.path }}
          ${{ inputs.dependencyManager }} run ruff check . && ${{ inputs.dependencyManager }} run ruff format --check . || ${{ inputs.dependencyManager }} run ruff format --diff .
        if: ${{ inputs.ruff }}
      - name: Test (run in parallel)
        run: |-
          cd ${{ inputs.path }}
          ${{ inputs.dependencyManager }} run coverage run --concurrency=multiprocessing manage.py test --settings=${{ inputs.projectName }}.settings.ci --parallel
          ${{ inputs.dependencyManager }} run coverage combine
          ${{ inputs.dependencyManager }} run coverage xml
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ inputs.path }}
          fail_ci_if_error: true
          files: coverage.xml
          name: codecov-umbrella
          verbose: true
    container:
      image: python:${{ inputs.pythonVersion }}
    env:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5"
