name: Docker Publish Workflow
on:
  workflow_call:
    inputs:
      # Mandatory inputs
      # Image name to publish
      imageName:
        required: TRUE
        type: string
      githubRef:
        required: true
        type: string
      # Optional finetuning inputs
      defaultBranch:
        required: False
        type: string
        default: master
      # Path to the docker context
      path:
        required: False
        type: string
        default: .
      # Path to the dockerfile (relative to `path`)
      dockerfile:
        required: False
        type: string
        default: Dockerfile
      # A condition on when to push the built image.
      push:
        required: False
        type: string
        default: ${{ inputs.githubRef == 'refs/heads/master' }}
      # Tags to apply to the built image.
      tags:
        required: False
        type: string
        default: latest,${{ github.sha }}
      # If enabled, will cache_from the latest version of the docker image.
      cache:
        required: False
        type: boolean
        default: true
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
jobs:
  docker-publish:
    name: Docker Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-publish-landing
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build/Publish
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.path }}
          file: ${{ inputs.path }}/${{ inputs.dockerfile }}
          push: ${{ inputs.push }}
          cache-from: ${{ inputs.cache && 'type=local,src=/tmp/.buildx-cache,type=registry,ref=pennlabs/${{ inputs.imageName }}:latest' }}
          cache-to: ${{ inputs.cache && 'type=local,dest=/tmp/.buildx-cache' }}
          tags: ${{ join(inputs.tags.split(',').map(tag => 'pennlabs/${{ inputs.imageName }}:' + tag), ',') }}
